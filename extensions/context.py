import subprocess

from copier_templates_extensions import ContextHook

REMOTE_URLS = {
    "github": {
        "domain_pages": "github.io",
        "pipeline": "%(remote_url_https)s/actions?query=branch%%3A%(default_branch)s",
        # coverage badge is generated by github action and published on github pages
        "badge_coverage": "%(remote_url_pages)s/badges/coverage.svg",
        "badge_pipeline": "%(remote_url_https)s/actions/workflows/ci.yaml/badge.svg",
    },
    "gitlab": {
        "pipeline": "%(remote_url_https)s/-/pipelines",
        "badge_coverage": "%(remote_url_https)s/badges/%(default_branch)s/coverage.svg",
        "badge_pipeline": "%(remote_url_https)s/badges/%(default_branch)s/pipeline.svg",
    },
    "gitlab-iis": {
        "domain_pages": "git01.iis.fhg.de",
    },
    "gitlab-fhg": {
        "domain_pages": "pages.fraunhofer.de",
    },
}


class ContextUpdater(ContextHook):
    update = False

    def hook(self, context):
        context["author_name"] = call(["git", "config", "user.name"]) or context["user_name"]
        context["author_email"] = call(["git", "config", "--global", "user.email"]) or ""
        infer_urls_from_remote(context)
        context["cli_command"] = context["package_name"].replace("_", "-")


def infer_urls_from_remote(context) -> dict[str, str]:
    """Infer URLs from given remote configuration.

    Example:
        remote_url = git@git01.iis.fhg.de:ks-ip-lib/software/sample_project.git
                        |----------------|---------|-----------------------|
                              domain        group         pages_path
                                         |---------------------------------|
                                                       path
        remote_url_https = https://git01.iis.fhg.de/ks-ip-lib/software/sample_project/
                                  |----------------|---------------------------------|
                                        domain                   path
        remote_url_pages = https://ks-ip-lib.git01.iis.fhg.de/software/sample_project/
                                  |---------|----------------|-----------------------|
                                     group        domain             pages_path

    """
    remote, remote_url = context["remote"], context["remote_url"]

    platform = remote.split("-", 1)[0]
    domain = remote_url.replace("git@", "").split(":", 1)[0]
    path = remote_url.split(":", 1)[1].rstrip(".git")
    group = path.split("/", 1)[0]
    domain_pages = REMOTE_URLS[remote]["domain_pages"]
    pages_path = path.split("/", 2)[1]

    context["platform"] = platform
    context["remote_url_https"] = f"https://{domain}/{path}"
    context["remote_url_pages"] = f"https://{group}.{domain_pages}/{pages_path}"
    context["remote_url_pipeline"] = REMOTE_URLS[platform]["pipeline"] % context
    context["remote_url_coverage_badge"] = REMOTE_URLS[platform]["badge_coverage"] % context
    context["remote_url_pipeline_badge"] = REMOTE_URLS[platform]["badge_pipeline"] % context


def call(cmd: list[str]):
    try:
        return subprocess.check_output(cmd, text=True).strip()
    except subprocess.CalledProcessError:
        return None
