{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Project Template","text":"<p>A customizable template for new Python projects to get you up and running with current best practices faster.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Each project has a README and CHANGELOG file and includes further documentation based on Material for MkDocs or Sphinx.</li> <li>Testing and continuous integration tooling are included from the very beginning<ul> <li>Test coverage is collected and displayed as a badge</li> <li>Coverage report is integrated with Gitlab's coverage report artifact</li> </ul> </li> <li>Projects use pre-commit for sanity checks on each commit or push</li> <li>Projects use bumpversion to increase their version according to semantic versioning guidelines</li> <li>Python projects are installable by default and provide a simple command-line interface</li> </ul> <p>Everything comes pre-configured with sensible defaults so you can focus on your implementation and let the template handle the rest.</p> <p>See the sample project to see how projects generated from this template using default values look like.</p>"},{"location":"_nav/","title":"nav","text":"<ul> <li>Home</li> <li>User Guide<ul> <li>Getting Started</li> <li>Creating your first project</li> <li>Next steps</li> <li>About the project structure</li> <li>user-guide/*</li> <li>Topics<ul> <li>user-guide/topics/*</li> </ul> </li> </ul> </li> <li>Reference</li> <li>Template Developer Guide</li> </ul>"},{"location":"developer-guide/documentation/","title":"Documentation","text":"<p>This project uses MkDocs with the Material for MkDocs theme.</p>"},{"location":"developer-guide/documentation/#configuration","title":"Configuration","text":"<code>mkdocs.yml</code> Configuration File <pre><code>site_name: Project Template for Python\nrepo_url: https://git01.iis.fhg.de/mkj/project-template\nrepo_name: project-template\nsite_url: http://mkj.git01.iis.fhg.de/project-template\nedit_uri: -/edit/main/docs/\nsite_dir: build/docs\ntheme: # https://squidfunk.github.io/mkdocs-material/setup/\nname: material\nicon:\nlogo: material/satellite-variant\ntag:\ndoc: material/book-open-page-variant\ntest: material/test-tube\nvcs: octicons/git-branch-16\ndefault: material/tag\nfavicon: assets/material-satellite-variant.svg\nfeatures:\n- navigation.instant\n- navigation.tracking\n- navigation.indexes\n- navigation.top\n- navigation.tabs\n- navigation.sections\n- navigation.prune\n- content.code.annotate\n- toc.follow\n- navigation.footer\npalette:\n- media: \"(prefers-color-scheme: light)\"\nscheme: default\nprimary: teal\naccent: deep orange\ntoggle:\nicon: material/weather-sunny\nname: Switch to dark mode\n- media: \"(prefers-color-scheme: dark)\"\nscheme: slate\nprimary: teal\naccent: amber\ntoggle:\nicon: material/weather-night\nname: Switch to light mode\nplugins:\n- search\n- git-revision-date-localized:\ntype: timeago\nfallback_to_build_date: true\n- exclude:\nglob:\n- util/*\n- literate-nav:\nnav_file: _nav.md\nimplicit_index: true\n- macros: # see https://mkdocs-macros-plugin.readthedocs.io/\ninclude_dir: .\nmodule_name: docs/util/macros\nmodules: [includex]\n- autorefs\n- tags:\nenabled: !ENV [CI, true]\ntags_file: reference/tooling/index.md\n- mike:\ncanonical_version: latest\nmarkdown_extensions:\n- abbr\n- meta\n- pymdownx.inlinehilite\n- pymdownx.snippets:\ncheck_paths: true\nurl_download: true\nauto_append:\n- docs/util/abbreviations.md\n- pymdownx.highlight:\nanchor_linenums: true\n- pymdownx.superfences:\ncustom_fences:\n- name: mermaid\nclass: mermaid\nformat: !!python/name:pymdownx.superfences.fence_code_format\n- pymdownx.magiclink:\nhide_protocol: True\nprovider: gitlab\nuser: mkj\nrepo: project-template\nrepo_url_shortener: True\nrepo_url_shorthand: True\n- footnotes\n- pymdownx.tabbed:\nalternate_style: true\n- admonition\n- pymdownx.details\n- md_in_html\n- toc:\nmarker: \"\"\npermalink: \"#\"\npermalink_title: \"Link to this section\"\ntoc_depth: 3\n- attr_list\n- pymdownx.emoji:\nemoji_index: !!python/name:materialx.emoji.twemoji\nemoji_generator: !!python/name:materialx.emoji.to_svg\n- pymdownx.keys\n- def_list\n- pymdownx.critic\nextra_javascript:\n# pymdownx.magiclink customization\n- assets/magiclink.js\nextra_css:\n# - https://cdn.jsdelivr.net/gh/rod2ik/cdn@main/mkdocs/css/columns.css # https://eskool.gitlab.io/mkhack3rs/columns/\n# pymdownx.magiclink customization\n- assets/magiclink.css\n- assets/custom.css\nextra:\ngenerator: false\nURL_EXAMPLE_FILE:\n!ENV [\nURL_EXAMPLE_FILE,\nhttps://git01.iis.fhg.de/mkj/sample-project/-/raw/main,\n]\ntags:\nDocumentation: doc\nTesting: test\nContinuous Integration: ci\nVersion Control: vcs\nversion:\nprovider: mike\n</code></pre>"},{"location":"developer-guide/documentation/#navigation","title":"Navigation","text":"<p>The navigation is setup using <code>mkdocs-literate-nav</code> and managed in the <code>_nav.md</code> file:</p> <pre><code>- [Home](./index.md)\n- User Guide\n    - [Getting Started](./user-guide/getting-started.md)\n    - [Creating your first project](./user-guide/first-project.md)\n    - [Next steps](./user-guide/next-steps.md)\n    - [About the project structure](./user-guide/project-structure.md)\n    - user-guide/*\n    - Topics\n        - user-guide/topics/*\n- [Reference](./reference/)\n- [Template Developer Guide](./developer-guide/)\n</code></pre>"},{"location":"developer-guide/documentation/#macros","title":"Macros","text":"<p>Jinja macros are provided by <code>mkdocs-macros</code> and can be configured via the <code>macros.py</code> file:</p> <code>docs/util/macros.py</code> <pre><code>\"\"\"Documentation macros.\n[`mkdocs-macros-plugin` Documentation](https://mkdocs-macros-plugin.readthedocs.io/)\n\"\"\"\nimport hashlib\nimport json\nimport logging\nimport os\nimport pathlib\nimport re\nimport shlex\nimport subprocess\nimport tomllib\nimport unicodedata\nimport pymdownx.magiclink\nimport yaml\nfrom mkdocs_macros.plugin import MacrosPlugin\n# patch for private gitlab instance\nbase_url = \"https://git01.iis.fhg.de\"\npymdownx.magiclink.PROVIDER_INFO[\"gitlab\"].update(\n{\n\"url\": base_url,\n\"issue\": \"%s/{}/{}/issues/{}\" % base_url,\n\"pull\": \"%s/{}/{}/merge_requests/{}\" % base_url,\n\"commit\": \"%s/{}/{}/commit/{}\" % base_url,\n\"compare\": \"%s/{}/{}/compare/{}...{}\" % base_url,\n}\n)\nroot = pathlib.Path(__file__).parent.parent.parent\nlog = logging.getLogger(\"mkdocs.mkdocs_macros\")\ndef define_env(env: MacrosPlugin):\n\"\"\"Define variables, macros and filters for mkdocs-macros.\"\"\"\n@env.filter\ndef pretty_json(s, indent=2, **kwargs):\nreturn json.dumps(s, indent=indent, **kwargs)\n@env.filter\ndef pretty_json_obj(s, indent=2, indent_char=\" \"):\nr = \"\"\nindentation = \"\"\nprev = \"\"\nfor c in s:\nif c == \"{\":\nindentation += indent * indent_char\nr += c + \"\\n\" + indentation\nelif c == \"}\":\nindentation = indentation[:-indent]\nr += \"\\n\" + indentation + c\nelif c == \",\":\nr += c + \"\\n\" + indentation\nelif c == \" \" and prev != \":\":\npass\nelse:\nr += c\nprev = c\nreturn r\nenv.macro(read_toml)\nenv.macro(read_yaml)\nenv.macro(get_files)\nenv.macro(run)\nenv.variables[\"questions\"] = {\nk: v\nfor k, v in read_yaml(root / \"copier.yaml\").items()\nif not k.startswith(\"_\") and \"explanation\" in v\n}\ndef read_toml(filepath: pathlib.Path):\nfilepath = pathlib.Path(filepath)\nwith filepath.open(\"rb\") as f:\nreturn tomllib.load(f)\ndef read_yaml(filepath: pathlib.Path):\nfilepath = pathlib.Path(filepath)\nwith filepath.open(\"r\") as f:\nreturn yaml.safe_load(f)\ndef get_files(directory: str | pathlib.Path, match: str = \"\", ignore: str = \"\") -&gt; list[str]:\n\"\"\"Return list of files in *directory* that match the provided substring.\n    Args:\n        directory: path to directory\n        match: only files that contain this string will be included\n    Returns:\n        List of files in *directory*\n    \"\"\"\nrv = []\ntry:\ndirectory = pathlib.Path(directory)\nassert directory.is_dir()\nfor file in sorted(os.listdir(directory)):\nif match and match not in file:\ncontinue\nif ignore and ignore in file:\ncontinue\nrv.append(file)\nexcept Exception as e:\nrv.append(f\"Error: {e}\")\nreturn rv\nfp_cli_command_output_cache = root / \"build\" / \".docs_cache\"\nfp_cli_command_output_cache.mkdir(parents=True, exist_ok=True)\ndef run(\ncommand,\n*args,\nsetup: list = None,\nskip_lines=0,\nshow_command=False,\nskip_cache=False,\nshould_exit_with_error=False,\ncwd=\"\",\n):\nif setup is None:\nsetup = []\n# ensure arguments are all strings\nsetup = [str(x) for x in setup]\nif command.startswith(\"$ \"):\ncommand = command[1:]\nshow_command = True\nif \" \" in command:\ncommand = shlex.split(command)\nelse:\ncommand = [command, *[str(x) for x in args]]\nfilename = _get_filename(command, setup, cwd)\nfp_cached_command = fp_cli_command_output_cache / filename\nif skip_cache or not fp_cached_command.is_file():\nlog.info(\"Generating output for: %s\", \" \".join(setup) + \" \" + \" \".join(command))\nkwargs = {}\nif cwd:\ncwd = root / pathlib.Path(cwd)\nkwargs[\"cwd\"] = cwd\nresult = subprocess.run(\n[*setup, *command],\nstdout=subprocess.PIPE,\nstderr=subprocess.STDOUT,\ncheck=not should_exit_with_error,  # use to catch issues with any cli command\n**kwargs,\n)\nrv = result.stdout\nif (\nresult.returncode != 0 and not should_exit_with_error\n):  # We check ourselves, in order to log the output\nlog.error(\nf\"{' '.join(setup)} {' '.join(command)} failed with return code {result.returncode}\"\n)\nlog.error(rv.decode())\nfp_cached_command.open(\"wb\").write(rv)\noutput = fp_cached_command.open().read()\nif skip_lines:\noutput = \"\\n\".join(output.split(\"\\n\")[skip_lines:])\nif show_command:\ncommand_str = f\"$ {' '.join(command)}\"\noutput = command_str + \"\\n\" + output\nreturn output\ndef _get_filename(args: list[str], setup: list[str] = None, cwd: str = \"\") -&gt; str:\n\"\"\"Create filename with human-readable prefix and unique suffix for given args and setup.\n    Filenames include ascii-characters only and strip other characters problematic for certain filesystems.\n    Human-readable prefix will be generated from args alone.\n    Unique suffix (i.e. hash) will be generated from both args and setup.\n    Args:\n        args: list of cli arguments\n        setup: list of cli setup commands. Defaults to [].\n    Returns:\n        filename of the format: {args}_{hash}\n    \"\"\"\nsha_hash = hashlib.sha1((\"\".join([*setup, *args, cwd])).encode()).hexdigest()\nprog = pathlib.Path(args[0]).name\nfilename = f\"{prog}_{'_'.join(args[1:])}_{sha_hash}\"\nfilename = unicodedata.normalize(\"NFKD\", filename).encode(\"ascii\", \"ignore\").decode(\"ascii\")\nfilename = re.sub(r\"[^\\w\\s-]\", \"\", filename)\nreturn filename\n</code></pre>"},{"location":"developer-guide/examples/","title":"Example Projects","text":"<p>As the copier template requires familiarity with Jinja to be deciphered, a static example project is generated based on this template. It serves as a reference of how projects generated from this template look like.</p> <p>By forking (or copying from) the example project, users can benefit from this template without using or even knowing about copier.</p> <p>Using the example project directly makes it simpler but also less convenient for users, as they won't benefit from dynamic configuration of their individual project based on this template's questionnaire shown in Creating your first project.</p> <p>An example project generated using default values is available on all supported remotes.</p> <p>In addition, internal example projects are generated to be referenced in this documentation.</p>"},{"location":"developer-guide/release/","title":"Releasing a new version","text":"<p>As this repository is hosted on three different remotes to reach different target audiences (Fraunhofer IIS internal, FHG internal and public), it is convenient to have their respective main branches all available under different names in your local repository:</p> <pre><code>git remote add origin git@git01.iis.fhg.de:mkj/project-template.git\ngit checkout main\ngit remote add fhg git@gitlab.cc-asp.fraunhofer.de:mkj/project-template.git\ngit remote add github git@github.com:jannismain/python-project-template.git\ngit branch --set-upstream-to=fhg/main main-fhg\ngit branch --set-upstream-to=github/main main-github\n</code></pre> <p>Each of those remotes host a version of the project template with links updated to point to that remote. Therefore, updates cannot be simply pushed to those remotes but need to be merged into their main branches, so that the platform-specific changes remain intact.</p> <p>With those preparations in place, a new release can be created like this:</p> <ol> <li>Commit everything that should be part of the release to be <code>main</code> branch of the IIS-internal version of the repository. That includes updating the CHANGELOG and bumping the version number.</li> <li> <p>Merge those changes into the <code>main</code> branches of the fhg and public remotes.</p> <pre><code>git co main-fhg\ngit merge main --ff-only --ff\ngit co main-github\ngit merge main --ff-only --ff\n</code></pre> </li> <li> <p>Trigger the release process on the public <code>main</code> branch</p> <pre><code>make release\n</code></pre> </li> </ol>"},{"location":"developer-guide/supported-remotes/","title":"Supported Remotes","text":"<p>Some of the configuration this template provides is specific to the remote your repository is going to be hosted at. The following remotes are supported:</p> <ul> <li>GitHub</li> <li>Fraunhofer GitLab Instance</li> <li>Fraunhofer IIS GitLab Instance (internal)</li> </ul> <p>In addition, the template is also hosted on each of these remotes (linked above) so that it is easily accessible to users on each platform.</p>"},{"location":"developer-guide/template-in-package/","title":"Template in Package","text":""},{"location":"developer-guide/template-in-package/#summary","title":"Summary","text":"<ul> <li>use <code>make copy-template</code> before building a package.</li> <li>use <code>make link-template</code> during development with an in-place installation.</li> </ul>"},{"location":"developer-guide/template-in-package/#explanation","title":"Explanation","text":"<p>Copier templates require a <code>copier.yaml</code> in the root of the git project in order to be discovered during <code>copier copy gh:jannismain/python-project-template</code>.</p> <p>However, for distribution of the template as a Python package, the template files need to be part of the Python package in <code>src/init_python_project/</code>. So when building a package using <code>make build</code>, the template files are copied into the package using <code>make copy-template</code>.</p> <p>During development, a copy is impractical, as changes to the template are not picked up by <code>init-python-project</code>, which still uses the (now out-of-date) copy inside the package. For this reason, it is useful to link the template into the package using <code>make link-template</code>. Those symbolic links are not supported when building a Python package, so they are replaced the next time a package is created.</p>"},{"location":"developer-guide/template/","title":"Template","text":"<p>This template is built using copier.</p> <p>The <code>_subdirectory</code> is set to template, so that the template files are separated from other project files:</p> <p><pre><code>_subdirectory: template\n</code></pre> copier.yaml, line 1</p>"},{"location":"developer-guide/template/Calculated%20Variables/","title":"Calculated Variables","text":"<p>A calculated variable is a variable that is deduced from a user-provided value.</p> <p>They do not appear in the template questionaire and therefore cannot be modified by the user.</p> <p>Calculated template variables are managed in the <code>context</code> file within the template:</p> <p><pre><code>{# Example: remote_url = git@git01.iis.fhg.de:ks-ip-lib/software/sample_project.git #}\n{# |----------------|---------|-----------------------| #}\n{# domain group pages_path #}\n{# |---------------------------------| #}\n{# path #}\n{# remote_url_https = https://git01.iis.fhg.de/ks-ip-lib/software/sample_project/ #}\n{# remote_url_pages = https://ks-ip-lib.git01.iis.fhg.de/software/sample_project/ #}\n{% set domain = (remote_url | replace(\"git@\", \"\")).split(\":\")[0] %}\n{% set path = remote_url.split(\":\")[1].replace(\".git\", \"\") %}\n{% set group = path.split(\"/\")[0] %}\n{% set pages_path = \"/\".join(path.split(\"/\")[1:]) %}\n{% set remote_url_https = \"https://\" + domain + \"/\" + path %}\n{% if remote == 'github' %}\n{% set domain_pages = 'github.io' %}\n{% set path_pipeline = '/actions?query=branch%3A' + default_branch %}\n{% elif remote == 'gitlab-iis' %}\n{% set domain_pages = domain %}\n{% elif remote == 'gitlab-fhg' %}\n{% set domain_pages = 'pages.fraunhofer.de' %}\n{% endif %}\n{% if remote.startswith('gitlab') %}\n{% set path_pipeline = '/-/pipelines' %}\n{% endif %}\n{% set remote_url_pages = \"https://\" + group + \".\" + domain_pages + \"/\" + pages_path %}\n{% set remote_url_pipeline = remote_url_https + path_pipeline %}\n{% if remote == 'github' %}\n{# coverage badge is provided by gitlab #}\n## coverage badge is generated by github action and published on github pages\n{% set remote_url_coverage_badge = remote_url_pages + '/badges/coverage.svg' %}\n## pipeline badge is provided by github\n{% set remote_url_pipeline_badge = remote_url_https + '/actions/workflows/ci.yaml/badge.svg' %}\n{% else %}\n## coverage and pipeline badges are provided by gitlab\n{% set remote_url_coverage_badge = remote_url_https + '/badges/' + default_branch + '/coverage.svg' %}\n{% set remote_url_pipeline_badge = remote_url_https + '/badges/' + default_branch + '/pipeline.svg' %}\n{% endif %}\n{% set cli_command = package_name | replace(\"_\", \"-\") %}\n</code></pre> template/context, lines 1-</p> <p>This context can then be imported using the jinja import command.</p> <p>As an example, this was used in the README template to reuse the <code>remote_url_pages</code> and <code>remote_url_https</code> URLs, which are calculated from the <code>remote_url</code> provided by the user:</p> <p><pre><code># {{project_name}}\n{%- import 'template/context' as ctx with context %}\n[![badge_documentation][]][documentation] [![badge_pipeline][]][pipeline] [![badge_coverage][]][coverage] [![badge_maintainability][]]()\n[documentation]: {{ctx.remote_url_pages}}\n[badge_documentation]: https://img.shields.io/badge/Documentation-{{default_branch}}-blue\n</code></pre> template/README.md.jinja, lines 1-8</p>"},{"location":"examples/default/","title":"Sample Project","text":""},{"location":"examples/default/#installation","title":"Installation","text":"<pre><code>pip install git+https://github.com/mkj/sample-project\n</code></pre>"},{"location":"examples/default/#usage","title":"Usage","text":"<p>Call the <code>sample-project</code> command line interface like this:</p> <pre><code>$ sample-project\nHello, Sample Project!\n</code></pre> <p>Provide the <code>--help</code> option to see supported options and arguments.</p> <p>This project was created using the Project Template for Python</p>"},{"location":"examples/default/CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"examples/default/CHANGELOG/#unreleased","title":"Unreleased","text":""},{"location":"examples/default/CHANGELOG/#added","title":"Added","text":""},{"location":"examples/default/CHANGELOG/#fixed","title":"Fixed","text":""},{"location":"examples/default/CHANGELOG/#changed","title":"Changed","text":""},{"location":"examples/default/CHANGELOG/#removed","title":"Removed","text":""},{"location":"examples/default/CHANGELOG/#001-2000-01-01","title":"0.0.1 - 2000-01-01","text":"<p>Initial Release</p>"},{"location":"examples/default/docs/","title":"Index","text":"Python Project Template  [![](https://img.shields.io/badge/Documentation-main-blue)][docs] [![](https://img.shields.io/badge/Example-Sample_Project-blue)][sample project] [![PyPI - Version](https://img.shields.io/pypi/v/init-python-project)][pypi]   <p>A customizable template for new Python projects to get you up and running with current best practices faster.</p>"},{"location":"examples/default/docs/#features","title":"Features","text":"<ul> <li>Each project has a README and CHANGELOG file and includes further documentation based on Material for MkDocs or Sphinx.</li> <li>Testing and continuous integration tooling are included from the very beginning<ul> <li>Test coverage is collected and displayed as a badge</li> <li>Coverage report is integrated with Gitlab's coverage report artifact</li> </ul> </li> <li>Projects use pre-commit for sanity checks on each commit or push</li> <li>Projects use bumpversion to increase their version according to semantic versioning guidelines</li> <li>Python projects are installable by default and provide a simple command-line interface</li> </ul> <p>Everything comes pre-configured with sensible defaults so you can focus on your implementation and let the template handle the rest.</p> <p>See the sample project to see how projects generated from this template using default values look like.</p>"},{"location":"examples/default/docs/#getting-started","title":"Getting Started","text":""},{"location":"examples/default/docs/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python3.11 or newer</li> </ul>"},{"location":"examples/default/docs/#installation","title":"Installation","text":"<pre><code>pip install init-python-project\n</code></pre> <p>Note: If you have pipx installed (you should, it is good), you can skip this step and instead run it directly using <code>pipx run init-python-project</code></p>"},{"location":"examples/default/docs/#usage","title":"Usage","text":"<pre><code>init-python-project &lt;name of project&gt;\n</code></pre>"},{"location":"examples/default/docs/#user-guide","title":"User Guide","text":"<p>The first part of the user guide consists of tutorials on how to answer the template questions for Your First Project, what Next Steps there are after your project is created and why the Project Structure looks like it does.</p> <p>The second part of the user guide explains how best practices, like testing, documentation, and continuous integration, are implemented in this template.</p>"},{"location":"examples/default/docs/#contributing","title":"Contributing","text":"<p>Every kind contribution is appreciated. Here is a list of ways to contribute (from easy to more involved):</p> <ul> <li>report a bug</li> <li>open issues with feature requests (or other feedback)</li> <li>improve documentation</li> <li>review open merge requests</li> <li>contribute a bugfix or feature</li> </ul>"},{"location":"examples/default/docs/#working-on-issues","title":"Working on Issues","text":"<p>Have a bugfix or feature you want to contribute? That's exciting!</p> <p>If you are unsure about how to contribute changes, here is how I tend to do things:</p> <p><pre><code>flowchart LR\n    assign[assign issue to yourself] --&gt; mr[create branch &amp; draft mr] --&gt; implement[implement bugfix / feature] --&gt; review[assign maintainer as reviewer]</code></pre> Note: Feel free to do what works for you (e.g. fork &amp; merge request to upstream)</p> <p>If you are unsure about how to go about implementation, we can discuss the issue.</p>"},{"location":"examples/default/docs/#reviewing-changes","title":"Reviewing Changes","text":"<p>When you are reviewing a merge request, please leave a comment at the end of your review session indicating the scope of your review.</p> Example: Comment at the end of a review I can confirm this works on Windows! I tested project creation and successfully created a project with default values. I did not look at the individual changes in this MR.  <p>If you did a full review (i.e. review changes, verify on your machine, ...), you can additionally <code>Approve</code> the MR when you are done.</p> <p>If you want to learn more about the review process, have a look at Google Engineering Practices Documentation which includes the Code Reviewer's Guide and the Change Author's Guide.</p>"},{"location":"examples/default/docs/#known-issues","title":"Known Issues","text":"<ul> <li>Do not start your project name with <code>test</code>. It will mess with <code>pytest</code>'s automatic test discovery mechanism. If you want your project to be named test, you have to configure pytest accordingly.</li> </ul>"},{"location":"examples/default/docs/reference/","title":"Reference","text":"<p>::: sample_project</p>"},{"location":"examples/full/","title":"Sample Project","text":""},{"location":"examples/full/#installation","title":"Installation","text":"<pre><code>pip install git+https://github.com/mkj/sample-project\n</code></pre>"},{"location":"examples/full/#usage","title":"Usage","text":"<p>Call the <code>sample-project</code> command line interface like this:</p> <pre><code>$ sample-project\nHello, Sample Project!\n</code></pre> <p>Provide the <code>--help</code> option to see supported options and arguments.</p> <p>This project was created using the Project Template for Python</p>"},{"location":"examples/full/CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"examples/full/CHANGELOG/#unreleased","title":"Unreleased","text":""},{"location":"examples/full/CHANGELOG/#added","title":"Added","text":""},{"location":"examples/full/CHANGELOG/#fixed","title":"Fixed","text":""},{"location":"examples/full/CHANGELOG/#changed","title":"Changed","text":""},{"location":"examples/full/CHANGELOG/#removed","title":"Removed","text":""},{"location":"examples/full/CHANGELOG/#001-2000-01-01","title":"0.0.1 - 2000-01-01","text":"<p>Initial Release</p>"},{"location":"examples/full/docs/","title":"Index","text":"Python Project Template  [![](https://img.shields.io/badge/Documentation-main-blue)][docs] [![](https://img.shields.io/badge/Example-Sample_Project-blue)][sample project] [![PyPI - Version](https://img.shields.io/pypi/v/init-python-project)][pypi]   <p>A customizable template for new Python projects to get you up and running with current best practices faster.</p>"},{"location":"examples/full/docs/#features","title":"Features","text":"<ul> <li>Each project has a README and CHANGELOG file and includes further documentation based on Material for MkDocs or Sphinx.</li> <li>Testing and continuous integration tooling are included from the very beginning<ul> <li>Test coverage is collected and displayed as a badge</li> <li>Coverage report is integrated with Gitlab's coverage report artifact</li> </ul> </li> <li>Projects use pre-commit for sanity checks on each commit or push</li> <li>Projects use bumpversion to increase their version according to semantic versioning guidelines</li> <li>Python projects are installable by default and provide a simple command-line interface</li> </ul> <p>Everything comes pre-configured with sensible defaults so you can focus on your implementation and let the template handle the rest.</p> <p>See the sample project to see how projects generated from this template using default values look like.</p>"},{"location":"examples/full/docs/#getting-started","title":"Getting Started","text":""},{"location":"examples/full/docs/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python3.11 or newer</li> </ul>"},{"location":"examples/full/docs/#installation","title":"Installation","text":"<pre><code>pip install init-python-project\n</code></pre> <p>Note: If you have pipx installed (you should, it is good), you can skip this step and instead run it directly using <code>pipx run init-python-project</code></p>"},{"location":"examples/full/docs/#usage","title":"Usage","text":"<pre><code>init-python-project &lt;name of project&gt;\n</code></pre>"},{"location":"examples/full/docs/#user-guide","title":"User Guide","text":"<p>The first part of the user guide consists of tutorials on how to answer the template questions for Your First Project, what Next Steps there are after your project is created and why the Project Structure looks like it does.</p> <p>The second part of the user guide explains how best practices, like testing, documentation, and continuous integration, are implemented in this template.</p>"},{"location":"examples/full/docs/#contributing","title":"Contributing","text":"<p>Every kind contribution is appreciated. Here is a list of ways to contribute (from easy to more involved):</p> <ul> <li>report a bug</li> <li>open issues with feature requests (or other feedback)</li> <li>improve documentation</li> <li>review open merge requests</li> <li>contribute a bugfix or feature</li> </ul>"},{"location":"examples/full/docs/#working-on-issues","title":"Working on Issues","text":"<p>Have a bugfix or feature you want to contribute? That's exciting!</p> <p>If you are unsure about how to contribute changes, here is how I tend to do things:</p> <p><pre><code>flowchart LR\n    assign[assign issue to yourself] --&gt; mr[create branch &amp; draft mr] --&gt; implement[implement bugfix / feature] --&gt; review[assign maintainer as reviewer]</code></pre> Note: Feel free to do what works for you (e.g. fork &amp; merge request to upstream)</p> <p>If you are unsure about how to go about implementation, we can discuss the issue.</p>"},{"location":"examples/full/docs/#reviewing-changes","title":"Reviewing Changes","text":"<p>When you are reviewing a merge request, please leave a comment at the end of your review session indicating the scope of your review.</p> Example: Comment at the end of a review I can confirm this works on Windows! I tested project creation and successfully created a project with default values. I did not look at the individual changes in this MR.  <p>If you did a full review (i.e. review changes, verify on your machine, ...), you can additionally <code>Approve</code> the MR when you are done.</p> <p>If you want to learn more about the review process, have a look at Google Engineering Practices Documentation which includes the Code Reviewer's Guide and the Change Author's Guide.</p>"},{"location":"examples/full/docs/#known-issues","title":"Known Issues","text":"<ul> <li>Do not start your project name with <code>test</code>. It will mess with <code>pytest</code>'s automatic test discovery mechanism. If you want your project to be named test, you have to configure pytest accordingly.</li> </ul>"},{"location":"examples/full/docs/reference/","title":"Reference","text":"<p>::: sample_project</p>"},{"location":"examples/gitlab/","title":"Sample Project","text":""},{"location":"examples/gitlab/#installation","title":"Installation","text":"<pre><code>pip install git+https://git01.iis.fhg.de/mkj/sample-project\n</code></pre>"},{"location":"examples/gitlab/#usage","title":"Usage","text":"<p>Call the <code>sample-project</code> command line interface like this:</p> <pre><code>$ sample-project\nHello, Sample Project!\n</code></pre> <p>Provide the <code>--help</code> option to see supported options and arguments.</p> <p>This project was created using the Project Template for Python</p>"},{"location":"examples/gitlab/CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"examples/gitlab/CHANGELOG/#unreleased","title":"Unreleased","text":""},{"location":"examples/gitlab/CHANGELOG/#added","title":"Added","text":""},{"location":"examples/gitlab/CHANGELOG/#fixed","title":"Fixed","text":""},{"location":"examples/gitlab/CHANGELOG/#changed","title":"Changed","text":""},{"location":"examples/gitlab/CHANGELOG/#removed","title":"Removed","text":""},{"location":"examples/gitlab/CHANGELOG/#001-2000-01-01","title":"0.0.1 - 2000-01-01","text":"<p>Initial Release</p>"},{"location":"examples/gitlab/docs/","title":"Index","text":"Python Project Template  [![](https://img.shields.io/badge/Documentation-main-blue)][docs] [![](https://img.shields.io/badge/Example-Sample_Project-blue)][sample project] [![PyPI - Version](https://img.shields.io/pypi/v/init-python-project)][pypi]   <p>A customizable template for new Python projects to get you up and running with current best practices faster.</p>"},{"location":"examples/gitlab/docs/#features","title":"Features","text":"<ul> <li>Each project has a README and CHANGELOG file and includes further documentation based on Material for MkDocs or Sphinx.</li> <li>Testing and continuous integration tooling are included from the very beginning<ul> <li>Test coverage is collected and displayed as a badge</li> <li>Coverage report is integrated with Gitlab's coverage report artifact</li> </ul> </li> <li>Projects use pre-commit for sanity checks on each commit or push</li> <li>Projects use bumpversion to increase their version according to semantic versioning guidelines</li> <li>Python projects are installable by default and provide a simple command-line interface</li> </ul> <p>Everything comes pre-configured with sensible defaults so you can focus on your implementation and let the template handle the rest.</p> <p>See the sample project to see how projects generated from this template using default values look like.</p>"},{"location":"examples/gitlab/docs/#getting-started","title":"Getting Started","text":""},{"location":"examples/gitlab/docs/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python3.11 or newer</li> </ul>"},{"location":"examples/gitlab/docs/#installation","title":"Installation","text":"<pre><code>pip install init-python-project\n</code></pre> <p>Note: If you have pipx installed (you should, it is good), you can skip this step and instead run it directly using <code>pipx run init-python-project</code></p>"},{"location":"examples/gitlab/docs/#usage","title":"Usage","text":"<pre><code>init-python-project &lt;name of project&gt;\n</code></pre>"},{"location":"examples/gitlab/docs/#user-guide","title":"User Guide","text":"<p>The first part of the user guide consists of tutorials on how to answer the template questions for Your First Project, what Next Steps there are after your project is created and why the Project Structure looks like it does.</p> <p>The second part of the user guide explains how best practices, like testing, documentation, and continuous integration, are implemented in this template.</p>"},{"location":"examples/gitlab/docs/#contributing","title":"Contributing","text":"<p>Every kind contribution is appreciated. Here is a list of ways to contribute (from easy to more involved):</p> <ul> <li>report a bug</li> <li>open issues with feature requests (or other feedback)</li> <li>improve documentation</li> <li>review open merge requests</li> <li>contribute a bugfix or feature</li> </ul>"},{"location":"examples/gitlab/docs/#working-on-issues","title":"Working on Issues","text":"<p>Have a bugfix or feature you want to contribute? That's exciting!</p> <p>If you are unsure about how to contribute changes, here is how I tend to do things:</p> <p><pre><code>flowchart LR\n    assign[assign issue to yourself] --&gt; mr[create branch &amp; draft mr] --&gt; implement[implement bugfix / feature] --&gt; review[assign maintainer as reviewer]</code></pre> Note: Feel free to do what works for you (e.g. fork &amp; merge request to upstream)</p> <p>If you are unsure about how to go about implementation, we can discuss the issue.</p>"},{"location":"examples/gitlab/docs/#reviewing-changes","title":"Reviewing Changes","text":"<p>When you are reviewing a merge request, please leave a comment at the end of your review session indicating the scope of your review.</p> Example: Comment at the end of a review I can confirm this works on Windows! I tested project creation and successfully created a project with default values. I did not look at the individual changes in this MR.  <p>If you did a full review (i.e. review changes, verify on your machine, ...), you can additionally <code>Approve</code> the MR when you are done.</p> <p>If you want to learn more about the review process, have a look at Google Engineering Practices Documentation which includes the Code Reviewer's Guide and the Change Author's Guide.</p>"},{"location":"examples/gitlab/docs/#known-issues","title":"Known Issues","text":"<ul> <li>Do not start your project name with <code>test</code>. It will mess with <code>pytest</code>'s automatic test discovery mechanism. If you want your project to be named test, you have to configure pytest accordingly.</li> </ul>"},{"location":"examples/gitlab/docs/reference/","title":"Reference","text":"<p>::: sample_project</p>"},{"location":"examples/minimal/","title":"Sample Project","text":""},{"location":"examples/minimal/#installation","title":"Installation","text":"<pre><code>pip install git+https://github.com/mkj/sample-project\n</code></pre>"},{"location":"examples/minimal/#usage","title":"Usage","text":"<p>Call the <code>sample-project</code> command line interface like this:</p> <pre><code>$ sample-project\nHello, Sample Project!\n</code></pre> <p>Provide the <code>--help</code> option to see supported options and arguments.</p> <p>This project was created using the Project Template for Python</p>"},{"location":"examples/minimal/CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"examples/minimal/CHANGELOG/#unreleased","title":"Unreleased","text":""},{"location":"examples/minimal/CHANGELOG/#added","title":"Added","text":""},{"location":"examples/minimal/CHANGELOG/#fixed","title":"Fixed","text":""},{"location":"examples/minimal/CHANGELOG/#changed","title":"Changed","text":""},{"location":"examples/minimal/CHANGELOG/#removed","title":"Removed","text":""},{"location":"examples/minimal/CHANGELOG/#001-2000-01-01","title":"0.0.1 - 2000-01-01","text":"<p>Initial Release</p>"},{"location":"examples/mkdocs/","title":"Sample Project","text":""},{"location":"examples/mkdocs/#installation","title":"Installation","text":"<pre><code>pip install git+https://github.com/mkj/sample-project\n</code></pre>"},{"location":"examples/mkdocs/#usage","title":"Usage","text":"<p>Call the <code>sample-project</code> command line interface like this:</p> <pre><code>$ sample-project\nHello, Sample Project!\n</code></pre> <p>Provide the <code>--help</code> option to see supported options and arguments.</p> <p>This project was created using the Project Template for Python</p>"},{"location":"examples/mkdocs/CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"examples/mkdocs/CHANGELOG/#unreleased","title":"Unreleased","text":""},{"location":"examples/mkdocs/CHANGELOG/#added","title":"Added","text":""},{"location":"examples/mkdocs/CHANGELOG/#fixed","title":"Fixed","text":""},{"location":"examples/mkdocs/CHANGELOG/#changed","title":"Changed","text":""},{"location":"examples/mkdocs/CHANGELOG/#removed","title":"Removed","text":""},{"location":"examples/mkdocs/CHANGELOG/#001-2000-01-01","title":"0.0.1 - 2000-01-01","text":"<p>Initial Release</p>"},{"location":"examples/mkdocs/docs/","title":"Index","text":"Python Project Template  [![](https://img.shields.io/badge/Documentation-main-blue)][docs] [![](https://img.shields.io/badge/Example-Sample_Project-blue)][sample project] [![PyPI - Version](https://img.shields.io/pypi/v/init-python-project)][pypi]   <p>A customizable template for new Python projects to get you up and running with current best practices faster.</p>"},{"location":"examples/mkdocs/docs/#features","title":"Features","text":"<ul> <li>Each project has a README and CHANGELOG file and includes further documentation based on Material for MkDocs or Sphinx.</li> <li>Testing and continuous integration tooling are included from the very beginning<ul> <li>Test coverage is collected and displayed as a badge</li> <li>Coverage report is integrated with Gitlab's coverage report artifact</li> </ul> </li> <li>Projects use pre-commit for sanity checks on each commit or push</li> <li>Projects use bumpversion to increase their version according to semantic versioning guidelines</li> <li>Python projects are installable by default and provide a simple command-line interface</li> </ul> <p>Everything comes pre-configured with sensible defaults so you can focus on your implementation and let the template handle the rest.</p> <p>See the sample project to see how projects generated from this template using default values look like.</p>"},{"location":"examples/mkdocs/docs/#getting-started","title":"Getting Started","text":""},{"location":"examples/mkdocs/docs/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python3.11 or newer</li> </ul>"},{"location":"examples/mkdocs/docs/#installation","title":"Installation","text":"<pre><code>pip install init-python-project\n</code></pre> <p>Note: If you have pipx installed (you should, it is good), you can skip this step and instead run it directly using <code>pipx run init-python-project</code></p>"},{"location":"examples/mkdocs/docs/#usage","title":"Usage","text":"<pre><code>init-python-project &lt;name of project&gt;\n</code></pre>"},{"location":"examples/mkdocs/docs/#user-guide","title":"User Guide","text":"<p>The first part of the user guide consists of tutorials on how to answer the template questions for Your First Project, what Next Steps there are after your project is created and why the Project Structure looks like it does.</p> <p>The second part of the user guide explains how best practices, like testing, documentation, and continuous integration, are implemented in this template.</p>"},{"location":"examples/mkdocs/docs/#contributing","title":"Contributing","text":"<p>Every kind contribution is appreciated. Here is a list of ways to contribute (from easy to more involved):</p> <ul> <li>report a bug</li> <li>open issues with feature requests (or other feedback)</li> <li>improve documentation</li> <li>review open merge requests</li> <li>contribute a bugfix or feature</li> </ul>"},{"location":"examples/mkdocs/docs/#working-on-issues","title":"Working on Issues","text":"<p>Have a bugfix or feature you want to contribute? That's exciting!</p> <p>If you are unsure about how to contribute changes, here is how I tend to do things:</p> <p><pre><code>flowchart LR\n    assign[assign issue to yourself] --&gt; mr[create branch &amp; draft mr] --&gt; implement[implement bugfix / feature] --&gt; review[assign maintainer as reviewer]</code></pre> Note: Feel free to do what works for you (e.g. fork &amp; merge request to upstream)</p> <p>If you are unsure about how to go about implementation, we can discuss the issue.</p>"},{"location":"examples/mkdocs/docs/#reviewing-changes","title":"Reviewing Changes","text":"<p>When you are reviewing a merge request, please leave a comment at the end of your review session indicating the scope of your review.</p> Example: Comment at the end of a review I can confirm this works on Windows! I tested project creation and successfully created a project with default values. I did not look at the individual changes in this MR.  <p>If you did a full review (i.e. review changes, verify on your machine, ...), you can additionally <code>Approve</code> the MR when you are done.</p> <p>If you want to learn more about the review process, have a look at Google Engineering Practices Documentation which includes the Code Reviewer's Guide and the Change Author's Guide.</p>"},{"location":"examples/mkdocs/docs/#known-issues","title":"Known Issues","text":"<ul> <li>Do not start your project name with <code>test</code>. It will mess with <code>pytest</code>'s automatic test discovery mechanism. If you want your project to be named test, you have to configure pytest accordingly.</li> </ul>"},{"location":"examples/mkdocs/docs/reference/","title":"Reference","text":"<p>::: sample_project</p>"},{"location":"examples/sphinx/","title":"Sample Project","text":""},{"location":"examples/sphinx/#installation","title":"Installation","text":"<pre><code>pip install git+https://github.com/mkj/sample-project\n</code></pre>"},{"location":"examples/sphinx/#usage","title":"Usage","text":"<p>Call the <code>sample-project</code> command line interface like this:</p> <pre><code>$ sample-project\nHello, Sample Project!\n</code></pre> <p>Provide the <code>--help</code> option to see supported options and arguments.</p> <p>This project was created using the Project Template for Python</p>"},{"location":"examples/sphinx/CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"examples/sphinx/CHANGELOG/#unreleased","title":"Unreleased","text":""},{"location":"examples/sphinx/CHANGELOG/#added","title":"Added","text":""},{"location":"examples/sphinx/CHANGELOG/#fixed","title":"Fixed","text":""},{"location":"examples/sphinx/CHANGELOG/#changed","title":"Changed","text":""},{"location":"examples/sphinx/CHANGELOG/#removed","title":"Removed","text":""},{"location":"examples/sphinx/CHANGELOG/#001-2000-01-01","title":"0.0.1 - 2000-01-01","text":"<p>Initial Release</p>"},{"location":"examples/sphinx/docs/","title":"Index","text":"<p>```{include} ../README.md <pre><code>```{toctree}\n:maxdepth: 1\n:caption: \"Contents:\"\n:hidden:\n\nchangelog\n</code></pre></p>"},{"location":"examples/sphinx/docs/changelog/","title":"Changelog","text":"<p><code>{include} ../CHANGELOG.md</code></p>"},{"location":"reference/changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"reference/changelog/#unreleased","title":"unreleased","text":""},{"location":"reference/changelog/#006-2023-10-12","title":"0.0.6 - 2023-10-12","text":""},{"location":"reference/changelog/#added","title":"Added","text":"<ul> <li>automatically assign <code>asprunner</code> tag in GitLab CI configuration intended for <code>gitlab-fhg</code> remote.</li> <li>GitLab CI artifacts are set to expire after 1 week to reduce overall storage usage (most recent artifact is kept)</li> <li>pre-commit hook that lints <code>.gitlab-ci.yml</code> and prevents committing a faulty config<ul> <li>available for projects with gitlab remote using mkdocs</li> </ul> </li> </ul>"},{"location":"reference/changelog/#changed","title":"Changed","text":"<ul> <li>replace sphinx-autodoc2 with sphinx-autoapi for better google-style docstring support</li> </ul>"},{"location":"reference/changelog/#fixed","title":"Fixed","text":"<ul> <li>Gitlab projects using mkdocs didn't install doc requirements during CI</li> <li>docstring argument section not parsed correctly</li> </ul>"},{"location":"reference/changelog/#005-2023-09-25","title":"0.0.5 - 2023-09-25","text":""},{"location":"reference/changelog/#fixed_1","title":"Fixed","text":"<ul> <li>badge image url for projects hosted on GitLab</li> </ul>"},{"location":"reference/changelog/#004-2023-09-25","title":"0.0.4 - 2023-09-25","text":""},{"location":"reference/changelog/#changed_1","title":"Changed","text":"<ul> <li>rename <code>use_precommit</code> and <code>use_bumpversion</code> options to simply <code>precommit</code> and <code>bumpversion</code></li> </ul>"},{"location":"reference/changelog/#fixed_2","title":"Fixed","text":"<ul> <li>doc template: all templates files are included now</li> <li>do not include doc requirements in <code>make install-dev</code> if no docs are configured</li> <li>documentation examples are now built using the cli</li> </ul>"},{"location":"reference/changelog/#003-2023-09-21","title":"0.0.3 - 2023-09-21","text":""},{"location":"reference/changelog/#added_1","title":"Added","text":"<ul> <li>github ci now runs tests, collects coverage and creates maintainability and coverage badges</li> <li>add sphinx_template as an option when choosing sphinx for documentation</li> </ul>"},{"location":"reference/changelog/#changed_2","title":"Changed","text":"<ul> <li>template now uses a static documentation badge provided by shields.io</li> </ul>"},{"location":"reference/changelog/#fixed_3","title":"Fixed","text":"<ul> <li>link to pipeline in README now correctly links to github actions</li> <li>when bumpversion is selected, add <code>bump2version</code> to dev dependencies</li> </ul>"},{"location":"reference/changelog/#002-2023-09-19","title":"0.0.2 - 2023-09-19","text":""},{"location":"reference/changelog/#added_2","title":"Added","text":"<ul> <li><code>init-python-project --version</code> outputs template version</li> </ul>"},{"location":"reference/changelog/#001-2023-09-18","title":"0.0.1 - 2023-09-18","text":"<p>Started this template by forking pypa/sampleproject and converting it to a copier template.</p> <p>An example project (comparable to pypa/sampleproject) can be found at jannismain/python-project-template-example.</p>"},{"location":"reference/changelog/#added_3","title":"Added","text":"<ul> <li>CHANGELOG proposal from jimustafa in !185</li> <li>added <code>__main__</code> and <code>cli</code> modules (based on discussion of !67)</li> <li>Refactored into copier template<ul> <li>add option to use <code>bumpversion</code></li> <li>add option to use <code>pre-commit</code></li> <li>add option to choose between documentation tools: <code>MkDocs</code> or <code>Sphinx</code></li> <li>add <code>remote</code> option ('github' (default), 'gitlab-fhg', 'gitlab-iis')<ul> <li>if <code>gitlab-*</code> is selected, Gitlab CI configuration is added</li> <li>if <code>github</code> is selected, GitHub actions are added</li> </ul> </li> <li>add Gitlab CI configuration to<ul> <li>run tests</li> <li>collect test coverage and publish it as Gitlab report artefact</li> <li>calculate maintainability metric</li> <li>generate badges that are shown in the README</li> <li>generate documentation and publish via Gitlab Pages</li> </ul> </li> <li>add Github Actions configuration to<ul> <li>generate documentation and publish via Github Pages</li> </ul> </li> <li>add default branch option (default: <code>main</code>)</li> </ul> </li> <li>Documentation<ul> <li>add user, reference and developer guides</li> </ul> </li> <li><code>init_python_project</code> Package<ul> <li>contains template + <code>init-python-project</code> command line interface</li> </ul> </li> </ul>"},{"location":"reference/changelog/#changed_3","title":"Changed","text":"<ul> <li>convert to a copier template</li> <li>tests are executed using pytest (was unittest)</li> </ul>"},{"location":"reference/changelog/#removed","title":"Removed","text":"<ul> <li>trove classifiers (only relevant when publishing to PyPI)</li> </ul>"},{"location":"reference/terms/","title":"Terminology","text":""},{"location":"reference/terms/#git","title":"Git","text":"remote A remote in Git is a common repository that all team members use to exchange their changes. In most cases, such a remote repository is stored on a code hosting service like GitHub or GitLab."},{"location":"reference/terms/#python","title":"Python","text":"module A Python module corresponds to a Python source file with the <code>*.py</code> ending. package A directory that is marked as a Python package by containing a <code>__init__.py</code> file. An exception to this are namespace packages, which don't require such an indicator. reStructuredText Markup language used by Sphinx. A more common alternative is Markdown."},{"location":"reference/tooling/","title":"Tooling","text":""},{"location":"reference/tooling/#continuous-integration","title":"Continuous Integration","text":"<ul> <li>pre-commit</li> </ul>"},{"location":"reference/tooling/#documentation","title":"Documentation","text":"<ul> <li>MkDocs</li> <li>Sphinx</li> </ul>"},{"location":"reference/tooling/#testing","title":"Testing","text":"<ul> <li>pytest</li> </ul>"},{"location":"reference/tooling/#version-control","title":"Version Control","text":"<ul> <li>git</li> </ul>"},{"location":"reference/tooling/#versioning","title":"Versioning","text":"<ul> <li>bumpversion</li> </ul>"},{"location":"reference/tooling/bumpversion/","title":"bumpversion","text":"<p> Repository</p>","tags":["Versioning"]},{"location":"reference/tooling/git/","title":"git","text":"<p>Website  Documentation</p>","tags":["Version Control"]},{"location":"reference/tooling/git/#git-hooks","title":"git hooks","text":"<p>Git provides hooks to run custom code when specific git actions occur. One such action would be a commit, for which git provides the following hooks:</p> Hook When Common use cases <code>pre-commit</code> before commit process is started linting, style checks, etc. <code>prepare-commit-msg</code> before commit message editor is opened provide default commit message <code>commit-msg</code> after commit message is entered validate commit message <code>post-commit</code> after commit process is completed send notifications <p>These hooks are basically just scripts inside the <code>.git/hooks</code> directory that are called by git. However, there is also a framework called pre-commit, that allows for easy reuse of existing git hooks.</p>","tags":["Version Control"]},{"location":"reference/tooling/github/","title":"GitHub","text":""},{"location":"reference/tooling/github/#cli","title":"CLI","text":"<ul> <li>cli.github.com/</li> </ul>"},{"location":"reference/tooling/gitlab/","title":"GitLab","text":"<p>A git hosting platform and alternative to [GitHub] with the option to host the platform on-premise.</p>"},{"location":"reference/tooling/gitlab/#cli","title":"CLI","text":"<ul> <li>gitlab-org/cli</li> </ul>"},{"location":"reference/tooling/mkdocs/","title":"MkDocs","text":"","tags":["Documentation"]},{"location":"reference/tooling/mkdocs/#material-for-mkdocs","title":"Material for MkDocs","text":"<p>Material for MkDocs is a theme for MkDocs that adds many features to build beautiful documentation on the web.</p> <p> Documentation of example project built with Material for MkDocs</p> <p>Actually, this documentation happens to be built with Material for MkDocs too, so yours will likely look similar.</p>","tags":["Documentation"]},{"location":"reference/tooling/mkdocs/#configuration","title":"Configuration","text":"<p>MkDocs is configured in the <code>mkdocs.yml</code> file in the root of your project.</p> <code>mkdocs.yml</code> <pre><code>site_name: Sample Project\nrepo_url: https://github.com/mkj/sample-project\nrepo_name: sample-project\nsite_url: https://mkj.github.io/sample-project\nedit_uri: -/edit/main/docs/\ntheme:\nname: material\nplugins:\n- search\n- git-revision-date-localized: # https://timvink.github.io/mkdocs-git-revision-date-localized-plugin\ntype: timeago\nfallback_to_build_date: true\n- mkdocstrings: # see https://mkdocstrings.github.io/\ndefault_handler: python\nenable_inventory: true\nhandlers:\npython:\npaths: [src]\noptions:\nshow_root_heading: true\nshow_category_heading: false\nshow_submodules: true\nimport:\n- https://numpy.org/doc/stable/objects.inv\n- macros: # see https://mkdocs-macros-plugin.readthedocs.io/\ninclude_dir: .\nmodule_name: docs/macros\n</code></pre>","tags":["Documentation"]},{"location":"reference/tooling/mkdocs/#extensions","title":"Extensions","text":"","tags":["Documentation"]},{"location":"reference/tooling/mkdocs/#mkdocstrings","title":"<code>mkdocstrings</code>","text":"<p> Repository  Documentation</p>","tags":["Documentation"]},{"location":"reference/tooling/mkdocs/#mkdocs-macros","title":"<code>mkdocs-macros</code>","text":"<p> Repository  Documentation</p> <p>Use Jinja template expressions in your markdown documentation.</p>","tags":["Documentation"]},{"location":"reference/tooling/mkdocs/#mkdocs-macros-includex","title":"<code>mkdocs-macros-includex</code>","text":"<p> Repository  Documentation</p> <p>Include content from any file in your repository for documentation purposes.</p>","tags":["Documentation"]},{"location":"reference/tooling/pre-commit/","title":"pre-commit","text":"","tags":["Continuous Integration"]},{"location":"reference/tooling/pytest/","title":"pytest","text":"","tags":["Testing"]},{"location":"reference/tooling/sphinx/","title":"Sphinx","text":"<p>Sphinx is a popular documentation tool for Python projects.</p> Light ModeDark Mode <p> Preview of Documentation built with Sphinx using the Furo theme in light mode</p> <p> Preview of Documentation built with Sphinx using the Furo theme in dark mode</p>","tags":["Documentation"]},{"location":"reference/tooling/sphinx/#configuration","title":"Configuration","text":"<p>Sphinx is configured via a <code>conf.py</code> file.</p> <code>docs/conf.py</code> <pre><code># Configuration file for the Sphinx documentation builder.\n#\n# For the full list of built-in configuration values, see the documentation:\n# https://www.sphinx-doc.org/en/master/usage/configuration.html\n# -- Project information -----------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#project-information\nproject = \"Sample Project\"\ncopyright = \"2023, Fraunhofer IIS\"\nauthor = \"mkj\"\n# -- General configuration ---------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration\nextensions = []\ntemplates_path = [\"_templates\"]\nexclude_patterns = [\"_build\", \"Thumbs.db\", \".DS_Store\"]\n# -- Options for HTML output -------------------------------------------------\n# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output\n# https://pradyunsg.me/furo/\nhtml_theme = \"furo\"\nhtml_static_path = [\"_static\"]\n# html_logo = \"_static/logo.png\"\n# -- Options for MyST parser -------------------------------------------------\n# https://myst-parser.readthedocs.io/\nextensions += [\"myst_parser\"]\nmyst_enable_extensions = [\n\"attrs_block\",  # https://myst-parser.readthedocs.io/en/latest/syntax/optional.html#block-attributes\n\"attrs_inline\",  # https://myst-parser.readthedocs.io/en/latest/syntax/optional.html#inline-attributes\n\"colon_fence\",  # https://myst-parser.readthedocs.io/en/latest/syntax/optional.html#markdown-figures\n]\n# -- Options for sphinx-autoapi ----------------------------------------------\n# https://sphinx-autoapi.readthedocs.io/en/latest/reference/config.html\nextensions += [\n\"sphinx.ext.napoleon\",  # required to parse google-style docstrings\n\"sphinx.ext.autodoc\",  # required to parse typehints\n\"autoapi.extension\",\n]\nautoapi_dirs = [\"../src/sample_project\"]\n# https://sphinx-autoapi.readthedocs.io/en/latest/how_to.html#how-to-include-type-annotations-as-types-in-rendered-docstrings\nautodoc_typehints = \"description\"\n</code></pre> <p>See Sphinx Configuration for a list of supported options.</p>","tags":["Documentation"]},{"location":"reference/tooling/sphinx/#extensions","title":"Extensions","text":"","tags":["Documentation"]},{"location":"reference/tooling/sphinx/#myst_parser","title":"myst_parser","text":"<p> Documentation</p> <p>MyST - Markedly Structured Text - Parser</p> <p>A Sphinx and Docutils extension to parse MyST, a rich and extensible flavour of Markdown for authoring technical and scientific documentation.</p> <p>This extension of CommonMark allows for integration of markup previously only available when using reStructuredText.</p>","tags":["Documentation"]},{"location":"user-guide/first-project/","title":"Creating your first project","text":"<p>If you followed the steps outlined in Getting Started, you are now presented with a couple of questions about your new project:</p> QuestionAnswers      What is the name of your project?  Title case string, can contain spaces      What is the name of your Python package?  Lowercase string, can contain underscores      Use pre-commit to run checks on each commit?  <ul> <li>Yes (default)</li> <li>No</li> </ul>      Use bumpversion to manage semantic version across multiple files?  <ul> <li>Yes</li> <li>No (default)</li> </ul>      Which documentation tool do you want to use?  <ul> <li>Material for MkDocs (default)</li> <li>Sphinx</li> <li>None</li> </ul>      Which documentation template do you want to use?  <ul> <li>Fraunhofer IIS Sphinx Template</li> <li>None (default)</li> </ul>      Which platform will your project be hosted on?  <ul> <li>GitHub (default)</li> <li>FHG Gitlab</li> <li>IIS Gitlab</li> </ul>      User name (the one you used with your hosted git provider)       URL of the remote repository  SSH URL to your remote repository      Name of the initial git branch that will be created  Lowercase string, can contain dashesExamples: <code>main</code>, <code>master</code>, <code>dev</code> <p>Let's look at them one by one and figure out, what you should choose or how to find the information the template asks for.</p>"},{"location":"user-guide/first-project/#project-name","title":"Project Name","text":"<p>The project name will be used to propose a suitable package name and Remote Url. It is also repeated in multiple places (Python package configuration, documentation, etc.).</p>"},{"location":"user-guide/first-project/#package-name","title":"Package Name","text":"<p>This is the name of your Python package. As such, it will be used as the name of the directory containing your code. All imports of your package start with this name.</p> <p>Example: If you choose <code>sample_project</code> as your package name, your code files would be created in</p> <pre><code>./\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 sample_project\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 __main__.py\n\u2502       \u2514\u2500\u2500 some_module.py\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 ...\n</code></pre> <p>and your imports would look like this:</p> <pre><code>from sample_project import some_module\n</code></pre> <p>You might want to consult PEP 423 \u2013 Naming conventions and recipes related to packaging for guidance on Python package name conventions.</p> <p>The cli command included with this template will be named after your package, only with dashes instead of underscores. Following the example above, your cli would then be available as</p> <pre><code>$ sample-project --help\n</code></pre> <p>If you ever want to publish your Python package to PyPI, the package name has to be unique to be accepted there.</p> <p>Finally, the package name is repeated across multiple configuration and documentation files.</p>"},{"location":"user-guide/first-project/#pre-commit","title":"pre-commit","text":"<p>pre-commit is a tool that makes configuring git hooks a lot easier.</p> <p>This template uses pre-commit hooks to ensure, all changes match the expected formatting and style. Additionally, running linters at this stage can prevent committing something that contains obvious issues.</p> <p>Most formatters and some linters are able to fix issues automatically. So you can simply review the changes those tools made, stage them and commit again.</p>"},{"location":"user-guide/first-project/#bumpversion","title":"Bumpversion","text":"<p>If you want to version your project, bumpversion provides an easy way to increase version numbers across multiple files.</p> <p>It integrates with git and helps with your release workflow by automating version bump, commit and tag creation. Used correctly, releasing a new version of your project can be done with a single command.</p> <p>It also helps to follow semantic versioning guidelines when increasing your version numbers.</p>"},{"location":"user-guide/first-project/#docs","title":"Docs","text":"<p>Documentation is an important part of any project.</p> <p>So far, this template supports two documentation tools: MkDocs and Sphinx.</p> <p>MkDocs is a great documentation tool built around Markdown. It is easy to use and produces a great looking documentation website with minimal overhead and configuration.</p> <p>Sphinx is a powerful tool for documentation written in Markdown or reStructuredText. With the <code>myst_parser</code> it is now (almost) possible to rely on Markdown only. Choose this if you want to publish your documentation in multiple formats (e.g. PDF, HTML, ePub, ...).</p> <p>If you are not sure which one to use, simply go with the default \ud83d\ude09.</p>"},{"location":"user-guide/first-project/#docs-template","title":"Docs Template","text":"<p>See Fraunhofer IIS Sphinx Template.</p>"},{"location":"user-guide/first-project/#remote","title":"Remote","text":"<p>This template provides a CI configuration for either GitHub (Github Actions) or GitLab (Gitlab CI).</p> <p>Also, the link to your documentation depends on which remote you choose.</p> <p>If you want to push your project to multiple remotes, you can add them later.</p>"},{"location":"user-guide/first-project/#user-name","title":"User Name","text":"<p>This is the user name you are using with the remote provider you provided in the previous question.</p> <p>Together with remote, it will be used to suggest a remote url for your project.</p>"},{"location":"user-guide/first-project/#remote-url","title":"Remote Url","text":"<p>Apart from configuring the git remote for you, the remote URL is required to determine other values, such as</p> <ul> <li>Links in your README and CHANGELOG files</li> <li>Links to your documentation</li> <li>Link to your repository from your documentation</li> <li>...</li> </ul> <p>If you did not create your remote repository yet (i.e. new project at GitHub or Gitlab), this might be a good time to do so.</p> <p>Create empty repository</p> <p>Do not initialize your remote project with a LICENSE or README file. This will let you push your initial commit without merge or rebase.</p> GitlabGitHub <p> The SSH URL to your Gitlab repository can be found under the <code>Clone</code> dropdown (screenshot taken 23.08.23)</p> <p> The SSH URL to your GitHub repository can be found under the <code>&lt;&gt; Code</code> dropdown menu (screenshot taken 23.08.23)</p>"},{"location":"user-guide/first-project/#default-branch","title":"Default Branch","text":"<p>Name of the initial branch of your new project.</p> <p>This branch traditionally was called <code>master</code>, but is more often called <code>main</code> now.</p> <p>Congrats \ud83c\udf89 You just created your first project!</p> <p>Head over to Next Steps to find out what you should do now.</p> <p>\ud83e\udd13 Pro tip: Simply press . to continue to the next page...</p>"},{"location":"user-guide/getting-started/","title":"Getting Started","text":""},{"location":"user-guide/getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python3.11 or newer</li> </ul>"},{"location":"user-guide/getting-started/#installation","title":"Installation","text":"<pre><code>pip install init-python-project\n</code></pre> <p>Note: If you have pipx installed (you should, it is good), you can skip this step and instead run it directly using <code>pipx run init-python-project</code></p>"},{"location":"user-guide/getting-started/#usage","title":"Usage","text":"<pre><code>init-python-project &lt;name of project&gt;\n</code></pre> Using pipx <pre><code>pipx run init-python-project\n</code></pre> Using copier <p>The underlying template is built using copier. This means you can also use the copier template directly like this:</p> <pre><code>copier copy --trust https://git01.iis.fhg.de/mkj/project-template.git my_new_project\n</code></pre> <p>Note: <code>--trust</code> is required because the template uses tasks to setup your git repository for you.</p>"},{"location":"user-guide/next-steps/","title":"Next Steps","text":""},{"location":"user-guide/next-steps/#enable-ci","title":"Enable CI","text":"GitLabGitHub <p>On GitLab remotes, CI Pipelines might need to be enabled by assigning a CI Runner to your project. Do this now so your CI pipeline doesn't get stuck when you push your repository for the first time.</p> <p>On GitHub remotes, pages need to be configured for your project to be published from a GitHub Action under <code>Settings/Pages</code>:</p> <p></p>"},{"location":"user-guide/next-steps/#first-commit-and-push","title":"First commit and push","text":"<p>During project creation, you entered the URL to your remote project (e.g. on GitHub or GitLab). After project creation, the template configured this remote with your local repository, so you are now ready to make your first commit and push it to the remote repository.</p> Want to change the remote URL manually? <pre><code>git config remote.origin.url &lt;remote_url&gt;\n</code></pre> <p>If your are specifying a remote at a different location, you likely also need to update URLs in the following files:</p> <ul> <li><code>README.md</code></li> <li><code>CHANGELOG.md</code></li> <li>documentation configuration (either <code>mkdocs.yaml</code> or <code>docs/conf.py</code>)</li> </ul> <p>Let's start with an empty commit so we can verify everything is set up correctly without actually committing any files yet:</p> <pre><code>git commit --allow-empty -m \"initial commit\"\ngit push\n</code></pre> <p>If everything went smoothly, your remote project should be aware of your first commit now.</p>"},{"location":"user-guide/next-steps/#install-project","title":"Install Project","text":"<p>The new project is installable right away. Create a virtual environment using any method you like, for example using the builtin <code>venv</code> module:</p> <pre><code>python -m venv .venv\nsource .venv/bin/activate\n</code></pre> <p>Then use <code>install-dev</code> to install your Python project in-place with all optional dev requirements:</p> <pre><code>make install-dev\n</code></pre> <p>You can verify your installation by running the example cli included with the Python package by default. The command is the package name you have set, only with dashes instead of underscores. The CLI of <code>sample_project</code> would therefore be called like this:</p> <pre><code>(.venv) $ sample-project\nHello, Sample Project!\n</code></pre>"},{"location":"user-guide/next-steps/#start-implementing","title":"Start Implementing","text":"<p>Now you are ready to start your implementation. As a quick reference, Python packages and modules go into <code>./src/</code>, documentation into <code>./docs/</code> and tests into <code>./tests/</code>.</p>"},{"location":"user-guide/prepare-release/","title":"Prepare a new release","text":""},{"location":"user-guide/prepare-release/#update-changelog","title":"Update <code>CHANGELOG</code>","text":"<p>For each new release, the <code>CHANGELOG</code> needs to be updated in the following way:</p> <ol> <li>Rename the <code>## Unreleased</code> section to the version and date of the upcoming release</li> <li>Add a link to the upcoming release at the bottom of the document</li> <li>If not already done: document any user-related changes for the upcoming release<sup>1</sup></li> <li>Remove any empty sections for the upcoming release<sup>2</sup></li> <li>Update the <code>[unreleased]</code> link to point to the changes made since the upcoming release</li> </ol> <code>CHANGELOG</code> update in preparation of upcoming minor release <pre><code># Changelog\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.1.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n### Added\n### Fixed\n### Changed\n### Removed\n## [Unreleased]## [0.1.0] - 2023-11-30\nMinor update to `foo`, deprecate `bar` in favor of `flux` and remove `baz`.\n### Added\n### Fixed\n- Issue when calling `foo` twice in a row (#12)\n\n### Changed\n- `bar` is deprecated and should no longer be used. Use `flux` instead.\n\n### Removed\n- `baz` is removed (deprecated since [0.0.1])\n\n## [0.0.2] - 2023-11-27\n...\n\n[unreleased]: https://github.com/username/project-name/compare/v0.0.2v0.1.0...HEAD\n[0.1.0]: https://github.com/username/project-name/releases/tag/v0.1.0\n[0.0.2]: https://github.com/username/project-name/releases/tag/v0.0.2\n[0.0.1]: https://github.com/username/project-name/releases/tag/v0.0.1\n</code></pre> <p>Commit Convention</p> <p>When using conventional commits, gitmoji or any other commit message convention that allows to parse the scope of commits based on their message, updating the changelog could be automated.</p> <p>However, keep a changelog advises against generating the changelog based on commit messages, as commit messages are written for developers, while the changelog should be written for end users.</p> <p>Bumpversion</p> <p>If you chose to use <code>bumpversion</code>, the remaining steps are taken care of by the <code>bumpversion</code> command.</p>"},{"location":"user-guide/prepare-release/#bump-version-number","title":"Bump version number","text":"<p>With all changes for the upcoming release in place, you are ready to bump the version number.</p> <p>Increase the version number according to your versioning schema (e.g. [semantic versioning]) and commit the new version to your project.</p>"},{"location":"user-guide/prepare-release/#tag-release-commit","title":"Tag release commit","text":"<p>Now it is time to tag your most recent commit and push it to the remote. Make sure you committed everything that should be part of the upcoming release. Then</p> <pre><code>git tag -m \"bump v0.0.2 -&gt; v0.1.0\" v0.1.0\ngit push --tags\n</code></pre>"},{"location":"user-guide/prepare-release/#optional-create-release-on-your-remote-platform","title":"Optional: Create release on your remote platform","text":"<p>Both GitHub and GitLab provide ways to create releases based on git tags with additional metadata and artifacts, such as binaries or release notes.</p> GitHubGitLab <p>GitHubs CLI <code>gh</code> provides a nice interactive command to generate a release based on git tags:</p> <pre><code>$ gh release create\n? Tag name v0.1.0\n? Title (optional) (v0.1.0) v0.1.0\n? Release notes Write using generated notes as template\n? Is this a prerelease? No\n? Submit? Publish release\n</code></pre> <p>GitLabs CLI <code>glab</code> also provides the option to create a release:</p> <pre><code>$ glab release create v0.1.0\n? Release Title (optional) v0.1.0\n? Release notes Write my own\n\u2713 Release created\n</code></pre> <p><code>glab</code> will create the specified tag if it does not already exist.</p> <ol> <li> <p>Ideally, the CHANGELOG was already updated when each change was implemented\u00a0\u21a9</p> </li> <li> <p>For example, the <code>## Added</code> section should be omitted when nothing was added since the last release\u00a0\u21a9</p> </li> </ol>"},{"location":"user-guide/project-structure/","title":"Project Structure","text":"<p>Depending on which options you selected, your project initially consists of the following files and folders:</p> minimaldefaultfull <pre><code>docs/examples/minimal/\n\u251c\u2500\u2500 .copier-answers.yml\n\u251c\u2500\u2500 .github\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 workflows\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sample_project\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __main__.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 cli.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 package_data.dat\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 simple.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 test_cli.py\n    \u2514\u2500\u2500 test_simple.py\n\n6 directories, 13 files\n</code></pre> <pre><code>docs/examples/default/\n\u251c\u2500\u2500 .copier-answers.yml\n\u251c\u2500\u2500 .github\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 workflows\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 docs.yaml\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 .pre-commit-config.yaml\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 macros.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 reference.md\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sample_project\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __main__.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 cli.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 package_data.dat\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 simple.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 test_cli.py\n    \u2514\u2500\u2500 test_simple.py\n\n7 directories, 19 files\n</code></pre> <pre><code>docs/examples/full/\n\u251c\u2500\u2500 .bumpversion.cfg\n\u251c\u2500\u2500 .copier-answers.yml\n\u251c\u2500\u2500 .github\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 workflows\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 docs.yaml\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 .pre-commit-config.yaml\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 macros.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 reference.md\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sample_project\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __main__.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 cli.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 package_data.dat\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 simple.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 test_cli.py\n    \u2514\u2500\u2500 test_simple.py\n\n7 directories, 20 files\n</code></pre>"},{"location":"user-guide/project-structure/#python-specific-files","title":"Python-specific files","text":"<p>The Python project structure consists of the following elements</p> <pre><code>docs/examples/default/\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sample_project\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __main__.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 cli.py\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 simple.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 test_cli.py\n    \u2514\u2500\u2500 test_simple.py\n</code></pre> <ul> <li><code>pyproject.toml</code>: The main responsibility of this file is to declare the build system needed to build your Python package (<code>[build-system]</code>) as well as package metadata (in the <code>[project]</code> section). However, many Python tools support reading their configuration from this file. These sections are prefixed by <code>[tool.*]</code></li> <li><code>src</code>: folder that contains Python packages (folders that contain at least an <code>__init__.py</code> file) and modules (files ending in <code>.py</code>)</li> <li><code>tests</code>: folder that contains tests of your Python code</li> </ul> <p>While other structures are possible, this one has proven itself (and it also the one suggested by the Python Packaging Authority in their Python Packaging User Guide and corresponding sample project). Modern Python packaging tools, like setuptools, will recognize this convention and require no further configuration.</p>"},{"location":"user-guide/topics/ci/","title":"Continuous Integration","text":""},{"location":"user-guide/topics/cli/","title":"CLI","text":"<p>A CLI (or command line interface) is a type of script you can run in the terminal.</p>"},{"location":"user-guide/topics/cli/#frameworks","title":"Frameworks","text":"<p>While frameworks are not required to implement a CLI in Python, they might provide a better structure and useful utilities which make them worth exploring:</p> <ul> <li>click</li> <li>typer: based on click, integrates with type annotations</li> </ul>"},{"location":"user-guide/topics/cli/#references","title":"References","text":"<p>There is a section on Python CLIs in the IIS Knowledge Base.</p>"},{"location":"user-guide/topics/documentation/","title":"Documentation","text":"<p>Documentation is anything about your project that is not executed or used by your application or development environment.</p> <p>While code is written for both humans and machines, documentation is purely written for other humans.</p> <p>Each project starts with a README and CHANGELOG file. Additional documentation, such as a user guide or reference documentation is usually written in Markdown and published using one of the documentation tools included with the template.</p>"},{"location":"user-guide/topics/documentation/#readme","title":"README","text":"<p>The <code>README</code> included with the template only covers the bare minimum (installation, basic usage).</p> <code>README.md</code> <pre><code># Sample Project\n[![badge_documentation][]][documentation] [![badge_pipeline][]][pipeline] [![badge_coverage][]][coverage] [![badge_maintainability][]]()\n\n[documentation]: https://mkj.github.io/sample-project\n[badge_documentation]: https://img.shields.io/badge/Documentation-main-blue\n[coverage]: https://mkj.github.io/sample-project/coverage\n[badge_coverage]: https://mkj.github.io/sample-project/badges/coverage.svg\n[badge_pipeline]: https://github.com/mkj/sample-project/actions/workflows/ci.yaml/badge.svg\n[pipeline]: https://github.com/mkj/sample-project/actions?query=branch%3Amain\n[badge_maintainability]: https://mkj.github.io/sample-project/badges/maintainability.svg\n&lt;!-- TODO: extend readme template --&gt;\n\n## Installation\n'''console\npip install git+https://github.com/mkj/sample-project\n'''\n\n## Usage\nCall the `sample-project` command line interface like this:\n\n'''console\n$ sample-project\nHello, Sample Project!\n'''\n\nProvide the `--help` option to see supported options and arguments.\n\n---\n*This project was created using the [Project Template for Python](https://github.com/jannismain/python-project-template)*\n</code></pre> <p>For additional sections often found in READMEs, see Make a README, this README Generator or explore READMEs of popular GitHub projects.</p>"},{"location":"user-guide/topics/documentation/#changelog","title":"CHANGELOG","text":"<p>The <code>CHANGELOG</code> included with the template follows the keep a changelog format.</p> <code>CHANGELOG.md</code> <pre><code># Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.1.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n### Added\n### Fixed\n### Changed\n### Removed\n## [0.0.1] - 2000-01-01\nInitial Release\n\n[unreleased]: https://github.com/mkj/sample-project/compare/v0.0.1...HEAD\n[0.0.1]: https://github.com/mkj/sample-project/releases/tag/v0.0.1\n</code></pre>"},{"location":"user-guide/topics/documentation/#api-documentation","title":"API Documentation","text":"<p>Part of the reference documentation is a section on the API<sup>1</sup> provided by your Python package or module. While this can be hand-written, it would be hard to keep in sync with the actual implementation. Therefore, it is usually included as docstrings with the code and extracted by a third-party tool.</p>"},{"location":"user-guide/topics/documentation/#documentation-tools","title":"Documentation Tools","text":""},{"location":"user-guide/topics/documentation/#material-for-mkdocs","title":"Material for MkDocs","text":"<p>Projects generated with this option start with MkDocs as a documentation system right out of the box, which is configured via the <code>./mkdocs.yaml</code> file to use the excellent Material for MkDocs theme. Python docstrings are extracted and added as reference documentation using the <code>mkdocstrings</code> extension.</p> <p>See the MkDocs reference for more information about the MkDocs configuration provided by the template.</p>"},{"location":"user-guide/topics/documentation/#sphinx","title":"Sphinx","text":"<p>Projects generated with this option start with Sphinx as a documentation system right out of the box, which is configured via the <code>./conf.py</code> file to use the excellent Furo theme. <code>myst</code> is included to add support for Markdown. Python docstrings are extracted and added as reference documentation using the <code>.. automodule</code> directive.</p> <p>See the Sphinx reference for more information about the Sphinx configuration provided by the template.</p> <ol> <li> <p>For Python projects, the API includes classes and methods meant to be used by users or programs interacting with your code.\u00a0\u21a9</p> </li> </ol>"},{"location":"user-guide/topics/markup-languages/","title":"Markup Languages","text":""},{"location":"user-guide/topics/markup-languages/#markdown","title":"Markdown","text":"<p>WIP</p> <p>TODO: Add information about Markdown here</p>"},{"location":"user-guide/topics/markup-languages/#restructuredtext","title":"reStructuredText","text":"<p>WIP</p> <p>TODO: Add information about rST here</p>"},{"location":"user-guide/topics/task-execution/","title":"Task Execution","text":"<p>Recurring tasks, such as running the test suite, generating a coverage report or previewing the documentation locally should be easy to do for any developer.</p> <p>Therefore, a unified way of running those tasks is preferable over remembering the command for each of those tasks. Especially when these commands  differ across projects, a common way of calling them without remembering their exact syntax reduces the mental overhead of everyday development tasks significantly.</p> <p>This project template relies on GNU make as a task runner. While it was designed as a build tool, it is available across many systems already, which helps with bootstrapping a project environment without any additional dependencies.</p>"},{"location":"user-guide/topics/task-execution/#makefile","title":"Makefile","text":"<p>An overview of the included Makefile targets and what they do can be obtained using <code>make help</code>:</p> <pre><code>\u001binstall-dev         \u001b install project including all development dependencies\n\u001bmaintainability     \u001b run maintainability checks\n\u001bcoverage            \u001b collect coverage data and open report in browser\n\u001blint                \u001b run static code checks\n\u001bdocs                \u001b build documentation\n\u001bdocs-live           \u001b serve documentation\n</code></pre>"},{"location":"user-guide/topics/task-execution/#installation","title":"Installation","text":"<pre><code>install-dev:    ## install project including all development dependencies\npip install -e .[test,dev]\npip install -r docs/requirements.txt\n</code></pre> <p>The project is being installed in place (using pip's <code>-e</code> option) including all optional requirements (given in square brackets).</p> <p>The project template keeps development requirements as optional requirements of the Python package in the pyproject.toml, so these can be installed alongside the project.</p> <pre><code>[project.optional-dependencies]\ndev = [\"black\", \"radon\", \"ruff\"]\ntest = [\"pytest\", \"pytest-cov\", \"coverage[toml]\"]\n</code></pre> <p>The advantage of this is that development dependencies are handled exactly the same as other dependencies. A possible downside of this approach is that these optional dependencies are also included in the package built for users. If this is undesirable, an alternative approach would be to keep development requirements in a separate file (e.g. <code>dev-requirements.txt</code>) or use tooling that manages development requirements (e.g. pipenv).</p>"},{"location":"user-guide/topics/task-execution/#static-analysis","title":"Static Analysis","text":""},{"location":"user-guide/topics/task-execution/#maintainability","title":"Maintainability","text":"<p>A key aspect of maintainability is reducing accidental complexity<sup>1</sup>. This means not allowing complexity to accumulate that is not inherent to the problem to be solved. During development, accidental complexity arises in many forms, some of which may be caught by the right tooling.</p>"},{"location":"user-guide/topics/task-execution/#radon","title":"Radon","text":"<p> Documentation</p> <pre><code>maintainability:  ## run maintainability checks\n@radon cc --total-average -nB -s src\n</code></pre> <p>One such tool to estimate complexity is radon, which can be used to calculate the average cyclomatic complexity (cc) for your project:</p> <pre><code>2 blocks (classes, functions, methods) analyzed.\nAverage complexity: A (2.5)\n</code></pre>"},{"location":"user-guide/topics/task-execution/#code-linters","title":"Code Linters","text":"<p>Another type of static analysis is code linting i.e. analyzing source code for potential errors, code style violations, and programming best practice adherence.</p> <pre><code>lint:   ## run static code checks\n@ruff src tests\n</code></pre>"},{"location":"user-guide/topics/task-execution/#ruff","title":"ruff","text":"<p> Documentation</p>"},{"location":"user-guide/topics/task-execution/#testing","title":"Testing","text":"<pre><code>coverage:   ## collect coverage data and open report in browser\n@pytest --doctest-modules --cov --cov-config=pyproject.toml --cov-branch --cov-report term --cov-report html:build/coverage\n    @test -z \"$(CI)\" \\\n&amp;&amp; ( echo \"Opening 'build/coverage/index.html'...\"; open build/coverage/index.html )\\\n|| echo \"\"\ncoverage-ci:\n@CI=true $(MAKE) coverage\n</code></pre>"},{"location":"user-guide/topics/task-execution/#documentation","title":"Documentation","text":"Makefile - Documentation Targets <pre><code>DOCS_TARGET?=build/docs\nMKDOCS_BIN?=mkdocs\ndocs:   ## build documentation\n${MKDOCS_BIN} build --site-dir ${DOCS_TARGET}/html\ndocs-live:  ## serve documentation\nmkdocs serve\n</code></pre> Example Makefile <pre><code>.PHONY: install-dev\ninstall-dev:    ## install project including all development dependencies\npip install -e .[test,dev]\npip install -r docs/requirements.txt\n\n.PHONY: maintainability\nmaintainability:  ## run maintainability checks\n@radon cc --total-average -nB -s src\n\n.PHONY: coverage coverage-ci\ncoverage:   ## collect coverage data and open report in browser\n@pytest --doctest-modules --cov --cov-config=pyproject.toml --cov-branch --cov-report term --cov-report html:build/coverage\n    @test -z \"$(CI)\" \\\n&amp;&amp; ( echo \"Opening 'build/coverage/index.html'...\"; open build/coverage/index.html )\\\n|| echo \"\"\ncoverage-ci:\n@CI=true $(MAKE) coverage\n\n.PHONY: lint\nlint:   ## run static code checks\n@ruff src tests\n\n.PHONY: docs docs-live\nDOCS_TARGET?=build/docs\nMKDOCS_BIN?=mkdocs\ndocs:   ## build documentation\n${MKDOCS_BIN} build --site-dir ${DOCS_TARGET}/html\ndocs-live:  ## serve documentation\nmkdocs serve\n\n.PHONY: help\n# a nice way to document Makefiles, found here: https://marmelab.com/blog/2016/02/29/auto-documented-makefile.html\nhelp:\n@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = \":.*?## \"}; {printf \"\\033[36m%-20s\\033[0m %s\\n\", $$1, $$2}'\n</code></pre>"},{"location":"user-guide/topics/task-execution/#pre-commit","title":"pre-commit","text":"Example <code>.pre-commit-config.yaml</code> <pre><code># See https://pre-commit.com for more information\n# See https://pre-commit.com/hooks.html for more hooks\nrepos:\n- repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v4.4.0\n    hooks:\n      - id: trailing-whitespace\n      - id: end-of-file-fixer\n        exclude: .*\\.dat\n      - id: check-yaml\n      - id: check-added-large-files\n</code></pre> <p>While pre-commit is primarily designed to run checks against your repository including changes you are about to commit, it can also be used to run those checks manually</p> <ol> <li> <p>sometimes also called incidental complexity\u00a0\u21a9</p> </li> </ol>"},{"location":"user-guide/topics/testing/","title":"Testing","text":""},{"location":"user-guide/topics/testing/#tooling","title":"Tooling","text":"<ul> <li>pytest: testing framework</li> <li>coverage.py: collect test coverage and create report</li> </ul>"},{"location":"user-guide/topics/testing/#configuration","title":"Configuration","text":"<p>Both pytest and coverage.py support configuration via the <code>pyproject.toml</code> file. Learn more at their respective reference documentation.</p> <ul> <li>pytest configuration reference</li> <li>coverage configuration reference</li> </ul>"},{"location":"user-guide/topics/testing/#writing-tests","title":"Writing Tests","text":"<p>Python tests are implemented using pytest in the <code>tests</code> subdirectory.</p> <pre><code>docs/examples/default/tests\n\u251c\u2500\u2500 test_cli.py\n\u2514\u2500\u2500 test_simple.py\n</code></pre> <p>Each test module starts with <code>test_</code> so it is automatically discovered when running <code>pytest</code>.</p> <p>In addition, pytest also collects data from a <code>conftest.py</code> file. This would be where global fixtures are defined that can be reused across multiple test modules.</p>"},{"location":"user-guide/topics/testing/#executing-tests","title":"Executing tests","text":""},{"location":"user-guide/topics/testing/#during-development","title":"...during development","text":"<p>Tests can be executed like this</p> <pre><code>$ pytest -q\n......                                                                   [100%]\n6 passed in 0.03s\n</code></pre> <p>If you have never used pytest before, check out their pytest documentation. The more you know about pytest, the better your test suite is going to be. \ud83d\ude09</p>"},{"location":"user-guide/topics/testing/#as-ci-job","title":"...as CI job","text":"<p>If a remote has been configured, your tests are also automatically run as part of the project's continuous integration pipeline.</p> Run tests in GitLab CI <pre><code>test:\ncache: # reuse venv in subsequent jobs\nkey: $CI_JOB_NAME\npaths:\n- .cache/pip\n- env/\nbefore_script:\n- python -m venv env\n- source env/bin/activate\nscript:\n- pip install .[test]\n- pytest --doctest-modules --cov --cov-config=pyproject.toml --cov-branch --cov-report term --cov-report html:build/coverage --junitxml=report.xml --cov-report xml\n- pip install anybadge==1.9.0\n- mkdir -p build/badges\n- pip install radon==5.1.0\n- make maintainability\n# generate a badge for the maintainability index with the total average of cyclomatic complexity as value\n- |\nscore=$(python -m radon cc --total-average src | tail -n 1 | cut -d' ' -f 3-4)\n[[ \"$score\" = A* ]] &amp;&amp; color=\"green\";  [[ \"$score\" = B* ]] &amp;&amp; color=\"green\"\n[[ \"$score\" = C* ]] &amp;&amp; color=\"yellow\"; [[ \"$score\" = D* ]] &amp;&amp; color=\"orange_2\"\n[[ \"$score\" = E* ]] &amp;&amp; color=\"orange\"; [[ \"$score\" = F* ]] &amp;&amp; color=\"orangered\"\npython -m anybadge --label=Maintainability --value=\"$score\" --color=\"$color\" -f build/badges/maintainability -o\ncoverage: '/TOTAL.+?(\\d+\\%)/'\nartifacts:\nwhen: always\nreports:\njunit: report.xml\ncoverage_report:\ncoverage_format: cobertura\npath: coverage.xml\npaths:\n- build/coverage\n- build/badges\n- env/\nexpire_in: 1w  # most recent artifact is always kept\ndocs:\nscript:\n- pip install -r docs/requirements.txt\n- mkdocs build --clean --site-dir build/docs\nartifacts:\npaths:\n- build/docs\n</code></pre> <p>A coverage report is created and linked in the README file.</p>"},{"location":"user-guide/topics/testing/#ide-integration","title":"IDE Integration","text":"<p>Most Python IDE's integrate with test suites written for pytest and allow you to run them easily during development. Here is an example of VSCode's Testing UI:</p> <p> VSCode automatically loads your test suite in the \"Testing\" sidebar and makes it easy to (1) run or debug all your tests or (2) run or debug individual tests. It understands parametrized tests and breaks them out as separate test cases.</p>"},{"location":"user-guide/topics/versioning/","title":"Versioning","text":"<p>The version is defined in the <code>pyproject.toml</code> file:</p> <p><pre><code># Versions should comply with PEP 440:\n# https://www.python.org/dev/peps/pep-0440/\n#\n# For a discussion on single-sourcing the version, see\n# https://packaging.python.org/guides/single-sourcing-package-version/\nversion = \"0.0.1\" # required\n</code></pre> docs/examples/default/pyproject.toml, lines 15-20</p>"},{"location":"user-guide/topics/versioning/#semantic-versioning","title":"Semantic Versioning","text":"<p>This template proposes to follow semantic versioning guidelines. It provides information about the scope of changes between releases while being simple enough to understand and use. It is widely used across software projects and many tools use semantic versioning by default.</p>"},{"location":"reference/tooling/","title":"Tooling","text":""},{"location":"reference/tooling/#continuous-integration","title":"Continuous Integration","text":"<ul> <li>pre-commit</li> </ul>"},{"location":"reference/tooling/#documentation","title":"Documentation","text":"<ul> <li>MkDocs</li> <li>Sphinx</li> </ul>"},{"location":"reference/tooling/#testing","title":"Testing","text":"<ul> <li>pytest</li> </ul>"},{"location":"reference/tooling/#version-control","title":"Version Control","text":"<ul> <li>git</li> </ul>"},{"location":"reference/tooling/#versioning","title":"Versioning","text":"<ul> <li>bumpversion</li> </ul>"}]}